module Help

  def Help.print_commands
    puts ""
    puts "List of commands in git-god:"
    puts "Note: opt(x) means x is optional."
    puts ""
    puts "gg a"
    puts "Sets the configuration to add all files for every commit."
    puts ""
    puts "gg b"
    puts "Shows local branches. Equivalent of \"git branch\""
    puts ""
    puts "gg ba"
    puts "Shows all branches. Equivalent of \"git branch -a\""
    puts ""
    puts "gg c \"<some message>\" [-cl <args>|-ct <args>]"
    puts "Commits a message, with optional flags -cl (Closing issues) and -ct (Contributors)"
    puts "Example: gg c \"hello\" -cl 23 45 -ct gorosgobe"
    puts "Commits: hello. Closes #23, #45. Contributors: @gorosgobe."
    puts ""
    puts "gg cb"
    puts "Shows the current branch."
    puts ""
    puts "gg ch <branch-name>"
    puts "Checkout to the given branch-name. Equivalent of \"git checkout branch-name\""
    puts ""
    puts "gg cn <repo-url>"
    puts "Clones the given repository. Equivalent of \"git clone repo-url\""
    puts ""
    puts "gg -commands"
    puts "If you do not know what this is, how did you get here?!"
    puts ""
    puts "gg cp \"<some message>\" [-cl <args>|-ct <args>]"
    puts "Commits and pushes. Arguments same as \"gg c\" above. Gets pushing " +
             "branch from configuration. If it has not been configured, then defaults to " +
             "master."
    puts "Equivalent of \"git commit <formatted-message-from-args>\""
    puts "              \"git push origin <config-branch-or-master>"
    puts ""
    puts "gg d <branch-name>"
    puts "Deletes the given branch. Equivalent of \"git branch -d branch-name\""
    puts ""
    puts "gg di"
    puts "Shows the difference between the current state of the repo versus the " +
             "last commit. Equivalent of \"git diff\""
    puts ""
    puts "gg fa"
    puts "Equivalent of \"git fetch --all\""
    puts ""
    puts "gg gs"
    puts "Shows the git repo status. Equivalent of \"git status\""
    puts ""
    puts "gg i opt([-name=<name> | -name=<name> -alias=<alias>])"
    puts "gg i opt([-n=<name> | -n=<name> -a=<alias>])"
    puts "Adds an issue. To add a new issue, the name attribute must be specified. " +
             "Alias is not required. To set the current issue to be a certain issue defined " +
             "before, use \"gg i -<alias-or-name-given-to-issue>\". To delete the current " +
             "issue, use \"gg i\" with no arguments"
    puts ""
    puts "gg l opt([-del=<delimiter>]) [<logs>]"
    puts "Sets the log to be the supplied arguments. An extra argument can be " +
             "added to specify the delimiter to use for these logs. The delimiter must be " +
             "one or two characters long."
    puts ""
    puts "gg m <branch-name>"
    puts "Merges the branch supplied to the current branch. Equivalent of \"git merge\""
    puts ""
    puts "gg nb <branch-name>"
    puts "Creates a new branch with the supplied name. Equivalent of \"git checkout -b branch-name\""
    puts ""
    puts "gg op"
    puts "Opens the configuration file #{CONFIG_FILE_EXTENSION} in VIM. Modify at own risk."
    puts ""
    puts "gg p opt(<branch-name>)"
    puts "Pushes. If the branch name is supplied, pushes to that branch. If not, " +
             "it will push to the branch configured. If no branch has been configured, will " +
             "default to master"
    puts ""
    puts "gg pc -o=<branch-name>"
    puts "Sets the configuration for pushing. Attribute origin must be supplied."
    puts ""
    puts "gg pl opt(<branch-name>)"
    puts "Pulls from branch. If branch has not been supplied, pulls from the " +
             "branch configured. If no branch has been configured, then it defaults to master."
    puts ""
    puts "gg plc -o=<branch-name>"
    puts "Sets the configuration for pulling. Attribute origin must be supplied."
    puts ""
    puts "gg prcp <parent-branch> \"<some message>\" [-cl <args>|-ct <args>]"
    puts "Protected commit and push."
    puts "Equivalent of \"git pull origin parent-branch\""
    puts "              \"git commit <commit-args>\""
    puts "              \"git push origin <current-branch>\""
    puts ""
    puts "gg r opt(<flags>)"
    puts "Removes the configuration of the flags supplied. If no flags are" +
             " supplied, the entire configuration is removed"
    puts ""
    puts "gg ro"
    puts "Shows the root of the repo. Equivalent of \"git rev-parse --show-toplevel\""
    puts ""
    puts "gg [s|status]"
    puts "Shows the current configuration for the repo."
    puts ""
    puts "gg sc \"<some message>\" [-cl <args>|-ct <args>]"
    puts "Exactly the same as \"gg c\", but only shows the commitable message, without commiting."
    puts ""
    puts "gg [scr|script] <script>"
    puts "Sets the given script/command to run before a push. Scripts/commands must be given relative to the root " +
             "directory of the git repository. Example: \"gg scr ls -a\"."
    puts ""
    puts "gg u"
    puts "Shows the url of the repo. Equivalent of \"git remote get-url origin\""
    puts ""
  end


end